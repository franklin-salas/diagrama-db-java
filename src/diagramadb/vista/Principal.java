/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diagramadb.vista;

import diagramadb.script.ScriptSQLpostgre;
import diagramadb.uml.DiagramaLienzo;
import diagramadb.uml.TClaseView;
import diagramadb.uml.elemento.Asociacion;
import diagramadb.uml.elemento.Clase;
import diagramadb.uml.elemento.Enlace;
import diagramadb.uml.elemento.Enlace.EnlaceEnum;
import java.awt.Color;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import javax.swing.SwingUtilities;

import java.awt.Point;
import java.awt.Rectangle;
import javax.swing.JOptionPane;
import org.jgraph.graph.AttributeMap;





/**
 *
 * @author FRANKLIN SALAS
 */
public class Principal extends javax.swing.JFrame {

    private final DiagramaLienzo contenedor;
    private Clase cell_first;
    private Clase cell_current;
    private boolean nuevaClase;
    private Object edit;
    private  int cant;
    private  EnlaceEnum enlace;
    
    public Principal() {
        initComponents();
        nuevaClase = false;
        contenedor = DiagramaLienzo.getInstancia();
          initContainer();
       this.jPanel3.add(contenedor.getGraph(), java.awt.BorderLayout.CENTER);
        this.cant=1;
        
        
    }
 private Clase createClase(int x, int y) {
        Clase cell = new Clase("Clase "+cant);
        cell.setId(this.cant); this.cant++;
        cell.listinerPintado(this.contenedor);
        cell.addPort();
        AttributeMap map = new AttributeMap();
        Rectangle rec = new Rectangle(x, y, 200, 250);
       org.jgraph.graph.GraphConstants.setBounds(map, rec);
        org.jgraph.graph.GraphConstants.setGradientColor(map, Color.BLUE);
        org.jgraph.graph.GraphConstants.setBorderColor(map, Color.BLACK);
        org.jgraph.graph.GraphConstants.setBackground(map, Color.BLACK);
       org.jgraph.graph.GraphConstants.setSizeableAxis(map, 50);
        org.jgraph.graph.GraphConstants.setOpaque(map, true);
        org.jgraph.graph.GraphConstants.setEditable(map, false);
        cell.setAttributes(map);
        return cell;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jToolBar2 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();

        jMenuItem1.setText("Add Atributos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Eliminar");
        jPopupMenu1.add(jMenuItem2);
        jPopupMenu1.add(jSeparator3);

        jMenuItem3.setText("Propiedades");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem3);

        jMenuItem4.setText("Propiedades");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItem4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1000, 600));
        setMinimumSize(new java.awt.Dimension(800, 400));
        setPreferredSize(new java.awt.Dimension(1000, 600));
        setSize(new java.awt.Dimension(800, 600));

        jToolBar2.setRollover(true);
        jToolBar2.setAlignmentY(0.47826087F);
        jToolBar2.setMaximumSize(new java.awt.Dimension(630, 32769));
        jToolBar2.setMinimumSize(new java.awt.Dimension(600, 25));
        jToolBar2.setPreferredSize(new java.awt.Dimension(600, 25));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/open.gif"))); // NOI18N
        jButton1.setToolTipText("Abrir");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/new.gif"))); // NOI18N
        jButton2.setToolTipText("Nuevo");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/save.gif"))); // NOI18N
        jButton3.setToolTipText("Guardar");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton3);
        jToolBar2.add(jSeparator1);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/class.png"))); // NOI18N
        jButton4.setToolTipText("Clase");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton4);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/entity.gif"))); // NOI18N
        jButton5.setToolTipText("Asociacion");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton5);
        jToolBar2.add(jSeparator2);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/pan.gif"))); // NOI18N
        jButton6.setToolTipText("Chat");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton6);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/pagesetup.gif"))); // NOI18N
        jButton7.setToolTipText("SQL");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton7);

        getContentPane().add(jToolBar2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.BorderLayout());
        jScrollPane2.setViewportView(jPanel3);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
       this.nuevaClase = true;
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
      
        Point p = getMousePosition();
        JVentana jv = new JVentana(this,true);
        jv.setLocation(p);
        JAtributos g = new JAtributos((Clase)edit,jv);
        jv.add(g);
       Dimension d= g.getPreferredSize();
       d.setSize(d.getWidth()+20, d.getHeight()+50);
       jv.setSize(d);
       jv.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
         Point p = getMousePosition();
         JVentana jv = new JVentana(this,true);
         jv.setLocation(p);
         Propiedades g = new Propiedades(jv,(Clase)edit);
         jv.add(g);
         Dimension d= g.getPreferredSize();
         d.setSize(d.getWidth()+20, d.getHeight()+50);
         jv.setSize(d);
         jv.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
           connection(EnlaceEnum.ASOCIACION);
      
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
         Point p = getMousePosition();
         JVentana jv = new JVentana(this,true);
         jv.setLocation(p);
         JEnlace g = new JEnlace(jv,(Enlace)edit);
         jv.add(g);
         Dimension d= g.getPreferredSize();
         d.setSize(d.getWidth()+20, d.getHeight()+50);
         jv.setSize(d);
         jv.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
             Point p = getMousePosition();
         JVentana jv = new JVentana(this,true);
         jv.setLocation(p);
         JTextSql g = new JTextSql(jv);
         ScriptSQLpostgre s = new ScriptSQLpostgre();
         s.setNameProyect("myBD");
         s.classToBD(contenedor.getGraph().getGraphLayoutCache().getAllViews());
         g.setTexto(s.getScript());
         jv.add(g);
         Dimension d= g.getPreferredSize();
         d.setSize(d.getWidth()+20, d.getHeight()+50);
         jv.setSize(d);
         jv.setVisible(true);
        
        } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error de Diseño de BD","ScriptUml",JOptionPane.QUESTION_MESSAGE);
        }
       
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton3ActionPerformed
   private void connection(EnlaceEnum relacion){   
     contenedor.getGraph().setPortsVisible(true);
     contenedor.actualizarPintado();
    this.enlace=relacion;
   }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar2;
    // End of variables declaration//GEN-END:variables

    private void initContainer() {
     contenedor.getGraph().getModel().addGraphModelListener(new EscuchadorModel());
        //adicione
        contenedor.getGraph().setMarqueeHandler(new MyMarqueeHandler());
        //********
        contenedor.getGraph().getGraphLayoutCache().setFactory(new JComponentCellViewFactory());
    }

    public class MyMarqueeHandler extends org.jgraph.graph.BasicMarqueeHandler {

        protected java.awt.geom.Point2D start, current;
        protected org.jgraph.graph.PortView port, firstPort;

        @Override
        public boolean isForceMarqueeEvent(java.awt.event.MouseEvent e) {
          
            if (e.isShiftDown()) {
                return false;
            }
            if (SwingUtilities.isRightMouseButton(e)) {
                return true;
            }
          
            if (nuevaClase) {
            contenedor.getGraph().getGraphLayoutCache().insert( createClase(e.getX()-100, e.getY()-125));
            nuevaClase=false;
            }
            port = getSourcePortAt(e.getPoint());
            Object o = contenedor.getGraph().getFirstCellForLocation(e.getX(), e.getY());
            if (o instanceof Clase) {
                cell_current = (Clase) o;
            } else {
                return true;
            }
            if (port != null && contenedor.getGraph().isPortsVisible()) {
           
                return true;
            }

            return super.isForceMarqueeEvent(e);
        }

        @Override
        public void mousePressed(final java.awt.event.MouseEvent e) {
            if (SwingUtilities.isRightMouseButton(e)) {
                contenedor.getGraph().getFirstCellForLocation(e.getX(), e.getY());
            } else if (port != null && contenedor.getGraph().isPortsVisible()) {
                start = contenedor.getGraph().toScreen(port.getLocation());
                firstPort = port;
                cell_first = cell_current;
               
            } else {
                super.mousePressed(e);
            }

        }

        @Override
        public void mouseDragged(java.awt.event.MouseEvent e) {
            if (start != null) {
                Graphics g = contenedor.getGraph().getGraphics();
                org.jgraph.graph.PortView newPort = getTargetPortAt(e.getPoint());
                if (newPort == null || newPort != port) {
                    paintConnector(Color.BLACK, contenedor.getGraph().getBackground(), g);
                    port = newPort;
                    Object o = contenedor.getGraph().getFirstCellForLocation(e.getX(), e.getY());
                    if (o instanceof Clase) {
                        cell_current = (Clase) o;
                    } else {
                        super.mouseDragged(e);
                    }
                    if (port != null) {
                        current = contenedor.getGraph().toScreen(port.getLocation());
                    } else {
                        current = contenedor.getGraph().snap(e.getPoint());
                    }
                    paintConnector(contenedor.getGraph().getBackground(), Color.BLACK, g);
                  
                }
            }
            super.mouseDragged(e);
        }

        public org.jgraph.graph.PortView getSourcePortAt(Point2D point) {
            contenedor.getGraph().setJumpToDefaultPort(false);
            org.jgraph.graph.PortView result;
            try {
                result = contenedor.getGraph().getPortViewAt(point.getX(), point.getY());
            } finally {
                contenedor.getGraph().setJumpToDefaultPort(true);
            }
            return result;
        }

        protected org.jgraph.graph.PortView getTargetPortAt(Point2D point) {
            return contenedor.getGraph().getPortViewAt(point.getX(), point.getY());
        }

        @Override
        public void mouseReleased(java.awt.event.MouseEvent e) {
     
            if ( e.isPopupTrigger()&& contenedor.getGraph().isSelectionEnabled() ) {
                    Object o = contenedor.getGraph().getFirstCellForLocation(e.getX(), e.getY());
                if ( o instanceof  Clase) {
                    edit = o;
                   jPopupMenu1.show(e.getComponent(), e.getX(), e.getY());
                }else if(o instanceof Enlace)
                { edit =o;   jPopupMenu2.show(e.getComponent(), e.getX(), e.getY()); }
                        
            }
            
            if (e != null && port != null && firstPort != null && firstPort != port) {
                connect((org.jgraph.graph.Port) firstPort.getCell(), (org.jgraph.graph.Port) port.getCell());
                e.consume();
            } else {
                contenedor.getGraph().repaint();
            }
            firstPort = port = null;
            start = current = null;
            cell_current = cell_first = null;
            super.mouseReleased(e);
        }

        @Override
        public void mouseMoved(java.awt.event.MouseEvent e) {
            if (e != null && getSourcePortAt(e.getPoint()) != null
                    && contenedor.getGraph().isPortsVisible()) {
                contenedor.getGraph().setCursor(new Cursor(Cursor.HAND_CURSOR));
            //    System.out.println("conectado");
                e.consume();
            } else {
                super.mouseMoved(e);
            }
        }

        protected void paintConnector(Color fg, Color bg, Graphics g) {
            g.setColor(fg);
            g.setXORMode(bg);
            paintPort(contenedor.getGraph().getGraphics());
            if (firstPort != null && start != null && current != null) {
               g.drawLine((int) start.getX(), (int) start.getY(), (int) current.getX(), (int) current.getY());
                
            }
        }

        protected void paintPort(Graphics g) {
            if (port != null) {
                boolean o = (org.jgraph.graph.GraphConstants.getOffset(port.getAllAttributes()) != null);
                Rectangle2D r = (o) ? port.getBounds() : port.getParentView().getBounds();
                r = contenedor.getGraph().toScreen((Rectangle2D) r.clone());
                r.setFrame(r.getX() -3 , r.getY() - 3, r.getWidth() + 6, r.getHeight() + 6);
                contenedor.getGraph().getUI().paintCell(g, port, r, true);
            }
        }
    }
   
     private class EscuchadorModel implements org.jgraph.event.GraphModelListener {

        @Override
        public void graphChanged(org.jgraph.event.GraphModelEvent e) {
            contenedor.getGraph().clearOffscreen();
        }
    }

    private class JComponentCellViewFactory extends org.jgraph.graph.DefaultCellViewFactory {

        @Override
        protected org.jgraph.graph.VertexView createVertexView(Object objCell) {
            org.jgraph.graph.DefaultGraphCell cell = (org.jgraph.graph.DefaultGraphCell) objCell;
            org.jgraph.graph.VertexView vertex = null;
            vertex = new TClaseView(cell);
            return vertex;
        }
    }

    
    
     public void connect(org.jgraph.graph.Port source, org.jgraph.graph.Port target) {
        Enlace edge = createEnlace(enlace, cell_first, cell_current);

        if (contenedor.getGraph().getModel().acceptsSource(edge, source)
                && contenedor.getGraph().getModel().acceptsTarget(edge, target)) {

            contenedor.getGraph().getGraphLayoutCache().insertEdge(edge, source, target);
            contenedor.getGraph().setPortsVisible(false);
        }
    }
     
      private Enlace createEnlace(EnlaceEnum enlace, Clase cell_first, Clase cell_current) {
      
   

              Enlace a = new Asociacion();
              a.setOrigen(cell_first);
              a.setLienzo(contenedor);
              a.setDestino(cell_current);
              return a;


    }
}
